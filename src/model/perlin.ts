import { lerp } from './utils';

function fade(t: number): number {
  return t ** 3 * (t * (t * 6 - 15) + 10);
}

function grad(hash: number, x: number, y: number): number {
  const h = hash & 15;
  const u = h < 8 ? x : y;
  let v;
  
  if (h < 4) v = y;
  else if (h === 12 || h === 14) v = x;
  else v = 0;
  
  return (h & 1 ? -u : u)
      +  (h & 2 ? -v : v);
}

// Hash lookup table as defined by Ken Perlin.
const p = new Uint8Array([ 151,160,137,91,90,15,
  131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,
  190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,
  88,237,149,56,87,174,20,125,136,171,168, 68,175,74,165,71,134,139,48,27,166,
  77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,
  102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208, 89,18,169,200,196,
  135,130,116,188,159,86,164,100,109,198,173,186, 3,64,52,217,226,250,124,123,
  5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,
  223,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167, 43,172,9,
  129,22,39,253, 19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228,
  251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107,
  49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,150,254,
  138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180
]);

export function perlinNoise(x: number, y: number, scale: number): number {
  x = Math.abs(x * scale);
  y = Math.abs(y * scale);
  const xi = Math.floor(x) & 255;
  const yi = Math.floor(y) & 255;
  const xf = x - Math.floor(x);
  const yf = y - Math.floor(y);
  const A = p[xi  ]! + yi;
  const B = p[xi+1]! + yi;
  const AA = p[A]!, AB = p[A+1]!;
  const BA = p[B]!, BB = p[B+1]!;


  const u = fade(xf);
  const v = fade(yf);

  const result = lerp(
    lerp(
      grad(p[AA]!, x  , y  ), 
      grad(p[BA]!, x-1, y  ),
      u,
    ),
    lerp(
      grad(p[AB]!, x  , y-1), 
      grad(p[BB]!, x-1, y-1),
      u,
    ),
    v,
  );
  return (result + 0.69) / 1.483;
}

