import type { Biome, EntityId, GameComponent, GameLocationId, LocationConfig, LocationItem, Pair } from '../../types';
import type { CampConfig, DungeonRoomsConfig } from '../rooms';

export function loc(
  tier: number,
  id: GameLocationId,
  biomes: Biome[],
  {
    type = 'misc',
    components,
    quantity,
    biomeArea = 7,
    prioritized = false,
    centerFirst = false,
    unique = false,
    group = '',
    minApart = 0,
    maxApart = 0,
    iconAlways = false,
    iconPlaced = false,
    randomRotation = true,
    slopeRotation = false,
    terrainDelta = [0, 3],
    inForest = null,
    minDistance = 0,
    maxDistance = 10000,
    minAlt = 1,
    maxAlt = 1000,
    radius,
    items,
    needsKey,
    dungeon,
    customMusic,
    camp,
  }: {
    type?: LocationConfig['type'],
    components?: GameComponent[],
    quantity: number,
    biomeArea?: number,
    prioritized?: boolean,
    centerFirst?: boolean,
    unique?: boolean,
    group?: string,
    minApart?: number,
    maxApart?: number,
    iconAlways?: boolean,
    iconPlaced?: boolean,
    randomRotation?: boolean,
    slopeRotation?: boolean,
    terrainDelta?: Pair<number>,
    inForest?: Pair<number> | null,
    minDistance?: number,
    maxDistance?: number,
    minAlt?: number,
    maxAlt?: number,
    radius: Pair<number>,
    customMusic?: string,
    items: LocationItem[],
    needsKey?: EntityId,
    dungeon?: DungeonRoomsConfig,
    camp?: CampConfig,
  },
  typeId = id,
): LocationConfig {
  if (type === 'runestone') {
    components = ['Runestone'];
  }
  return {
    id,
    typeId,
    components,
    tier,
    quantity,
    biomes,
    biomeArea,
    prioritized,
    centerFirst,
    unique,
    group,
    type,
    minApart,
    maxApart,
    iconAlways,
    iconPlaced,
    randomRotation,
    slopeRotation,
    terrainDelta,
    inForest,
    distance: [minDistance, maxDistance],
    altitude: [minAlt, maxAlt],
    radius,

    destructibles: {},
    creatures: {},
    resources: {},
    customMusic,
    items,
    needsKey,
    dungeon,
    camp,
  };
}
